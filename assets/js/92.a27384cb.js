(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{466:function(t,a,s){"use strict";s.r(a);var n=s(42),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"编程语言理论知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程语言理论知识"}},[t._v("#")]),t._v(" 编程语言理论知识")]),t._v(" "),s("h2",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("h3",{attrs:{id:"强类型和弱类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强类型和弱类型"}},[t._v("#")]),t._v(" 强类型和弱类型")]),t._v(" "),s("p",[t._v("1974年，Liskov和Zilles提出强类型语言的概念")]),t._v(" "),s("blockquote",[s("p",[t._v("在强类型语言中，当一个对象从调用函数传递到被调用函数时，其类型必须与被调用函数中声明的类型兼容")])]),t._v(" "),s("p",[t._v("但是这个解释很泛，也不容易理解，后人给出了更具体的解释：在强类型语言中，变量的类型不能被改变。")]),t._v(" "),s("p",[t._v("例如Java是强类型语言：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里Java会将'a'的ASCII码传递给x，x的类型仍然是int")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"静态类型和动态类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态类型和动态类型"}},[t._v("#")]),t._v(" 静态类型和动态类型")]),t._v(" "),s("p",[t._v("静态类型语言：在编译阶段确定所有变量的类型")]),t._v(" "),s("p",[t._v("动态类型语言：在运行阶段确定所有变量的类型")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// js在编译的时候并不知道a和b的类型")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" C b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c++在编译的时候就知道a和b的类型")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("静态类型语言在编译阶段就能够确定属性的偏移量：")]),t._v(" "),s("ul",[s("li",[t._v("编译阶段就确定了属性的偏移量")]),t._v(" "),s("li",[t._v("运行阶段直接根据偏移量来访问")]),t._v(" "),s("li",[t._v("所有对象共享相同的偏移量")])]),t._v(" "),s("p",[t._v("而动态类型语言编译时无法确定属性偏移量：")]),t._v(" "),s("ul",[s("li",[t._v("在运行时才知道偏移量")]),t._v(" "),s("li",[t._v("需要额外空间维护属性名和偏移量之间的映射")]),t._v(" "),s("li",[t._v("每个对象的偏移量都不相同")])]),t._v(" "),s("h2",{attrs:{id:"堆、栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆、栈"}},[t._v("#")]),t._v(" 堆、栈")]),t._v(" "),s("h3",{attrs:{id:"堆（heap）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆（heap）"}},[t._v("#")]),t._v(" 堆（Heap）")]),t._v(" "),s("p",[t._v("在堆上分配内存也叫做动态内存分配，这比较灵活。分配之后需要手工释放，否则就会造成内存泄漏。")]),t._v(" "),s("p",[t._v("在 C++ 标准中，更准确的叫法是自由存储区（free store），但通常它的底层实现也是堆，所以区分自由存储区和堆的意义不大。")]),t._v(" "),s("p",[t._v("C 语言使用 "),s("code",[t._v("malloc()")]),t._v(" 分配堆空间，使用 "),s("code",[t._v("free()")]),t._v(" 释放堆空间。")]),t._v(" "),s("p",[t._v("有些语言使用 new 这样的关键字分配内存：")]),t._v(" "),s("ul",[s("li",[t._v("C++："),s("code",[t._v("auto list = new std::vector<int>();")])]),t._v(" "),s("li",[t._v("Java："),s("code",[t._v("ArrayList<int> list = new ArrayList<int>();")])])]),t._v(" "),s("p",[t._v("有些语言把 new 关键字省略了：")]),t._v(" "),s("ul",[s("li",[t._v("Python："),s("code",[t._v("lst = list()")])])]),t._v(" "),s("p",[t._v("不管是哪种语言，都可能牵涉到三个操作：")]),t._v(" "),s("ol",[s("li",[t._v("分配一个某大小的内存块")]),t._v(" "),s("li",[t._v("释放一个之前分配的内存块")]),t._v(" "),s("li",[t._v("进行垃圾收集，释放不再使用的内存块")])]),t._v(" "),s("p",[t._v("C++ 通常会做上面的操作 1 和 2。Java 会做上面的操作 1 和 3。而 Python 会做上面的操作 1、2、3。这是语言的特性和实现方式决定的。")]),t._v(" "),s("p",[t._v("上面这三个操作看似简单，实际上水很深。这里简单列举几个堆分配器要解决的问题：")]),t._v(" "),s("ul",[s("li",[t._v("分配内存时需要找到最合适的内存块，避免过多的内存碎片")]),t._v(" "),s("li",[t._v("实际分配的内存通常会比申请的大，而且地址是对齐的")]),t._v(" "),s("li",[t._v("释放内存时要考虑合并连续未使用的内存块")]),t._v(" "),s("li",[t._v("垃圾回收是最复杂的，可单独作为一门研究生课程，这里不展开介绍")])]),t._v(" "),s("p",[t._v("阅读材料：")]),t._v(" "),s("ul",[s("li",[t._v("《CSAPP》9.9节")])]),t._v(" "),s("h3",{attrs:{id:"栈（stack）内存管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈（stack）内存管理"}},[t._v("#")]),t._v(" 栈（Stack）内存管理")]),t._v(" "),s("p",[t._v("局部变量存放在栈上，栈的分配和释放都非常简单，只要移动栈顶指针即可。栈的工作原理决定它天生不存在内存碎片和内存泄漏的情况。")]),t._v(" "),s("p",[t._v("阅读材料：")]),t._v(" "),s("ul",[s("li",[t._v("《CSAPP》3.7节，介绍了函数调用栈")]),t._v(" "),s("li",[t._v("《C专家编程》6.12节，介绍了 CMU 的学生利用栈“作弊”的轶事")])]),t._v(" "),s("h2",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),s("h3",{attrs:{id:"复合优于继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复合优于继承"}},[t._v("#")]),t._v(" 复合优于继承")]),t._v(" "),s("p",[t._v("使用继承的话，子类会调用父类的方法，就形成了子类对父类的依赖。父类内部的实现变动，可能会影响到子类。")]),t._v(" "),s("p",[t._v("参考《Effective Java》第四章第16条")]),t._v(" "),s("h2",{attrs:{id:"编程范式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[t._v("#")]),t._v(" 编程范式")]),t._v(" "),s("h3",{attrs:{id:"函数式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[t._v("#")]),t._v(" 函数式编程")]),t._v(" "),s("p",[t._v("练习：")]),t._v(" "),s("ul",[s("li",[t._v("实现一个memorize函数，加快汉诺塔算法、斐波那契数列算法")]),t._v(" "),s("li",[t._v("实现函数防抖、函数节流")])]),t._v(" "),s("h2",{attrs:{id:"语言实现细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语言实现细节"}},[t._v("#")]),t._v(" 语言实现细节")]),t._v(" "),s("h3",{attrs:{id:"参数传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数传递"}},[t._v("#")]),t._v(" 参数传递")]),t._v(" "),s("p",[t._v("Python中，函数参数只有引用传递，没有值传递，那么参数传int的时候不怕函数修改实参吗？")]),t._v(" "),s("h3",{attrs:{id:"多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),s("p",[t._v("Python有多种实现，其官方实现的多线程能力很差，因为Python有一个全局解释器锁，导致每一行Python代码都是竞争资源。")])])}),[],!1,null,null,null);a.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{393:function(r,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var r=this,t=r.$createElement,a=r._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"java-spring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-spring"}},[r._v("#")]),r._v(" Java Spring")]),r._v(" "),a("h2",{attrs:{id:"spring-framework-核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-framework-核心概念"}},[r._v("#")]),r._v(" Spring Framework 核心概念")]),r._v(" "),a("h3",{attrs:{id:"ioc-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ioc-容器"}},[r._v("#")]),r._v(" IOC 容器")]),r._v(" "),a("p",[r._v("控制反转 (Inverse of Control, IOC) 是软件工程领域的一种设计原则，用来降低代码耦合度，详见"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Inversion_of_control",target:"_blank",rel:"noopener noreferrer"}},[r._v("维基百科"),a("OutboundLink")],1),r._v("。")]),r._v(" "),a("p",[r._v("依赖注入 (Dependency Injection, DI) 是 IOC 的一种实现手段，可以通过 "),a("RouterLink",{attrs:{to:"/pages/java-reflection/"}},[r._v("Java 反射 (Reflection)")]),r._v(" 实现依赖注入。")],1),r._v(" "),a("p",[r._v("Spring 通过 "),a("RouterLink",{attrs:{to:"/pages/spring-ioc-container/"}},[r._v("IOC 容器")]),r._v("创建/管理 Bean。")],1),r._v(" "),a("h3",{attrs:{id:"aop：面向切面编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop：面向切面编程"}},[r._v("#")]),r._v(" AOP：面向切面编程")]),r._v(" "),a("h2",{attrs:{id:"spring-生态体系介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-生态体系介绍"}},[r._v("#")]),r._v(" Spring 生态体系介绍")])])}),[],!1,null,null,null);t.default=n.exports}}]);
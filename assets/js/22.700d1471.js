(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{380:function(t,a,s){"use strict";s.r(a);var _=s(43),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("h3",{attrs:{id:"隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[t._v("#")]),t._v(" 隐式类型转换")]),t._v(" "),s("p",[t._v("当运算符两边的类型不一致时，C++会尝试隐式类型转换，转换的规则是将低类型转为高类型。也就是说范围小的类型会转为范围大的类型，范围从小到大排序为：bool、char、int、long、long long、float、double。")]),t._v(" "),s("p",[t._v("C语言中是没有bool类型，大家用int类型来替代，为了兼容C语言，C++会在合适的时候将int转为bool。例如："),s("code",[t._v("true && 3")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"显式类型转换（强制类型转换）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式类型转换（强制类型转换）"}},[t._v("#")]),t._v(" 显式类型转换（强制类型转换）")]),t._v(" "),s("p",[t._v("C++从C语言继承了2种语法：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int(3.14)")])]),t._v(" "),s("li",[s("code",[t._v("(int)3.14")])])]),t._v(" "),s("p",[t._v("C++也有自己的语法类型"),s("code",[t._v("转换操作符<类型>(表达式)")]),t._v("，例如："),s("code",[t._v("static_cast<int>(3.14)")]),t._v("，一共有4种类型转换操作符：const_static、dynamic_cast、reinterpret_cast、static_cast。")]),t._v(" "),s("p",[t._v("既然写的是C++程序，那么建议用C++自己的语法。")]),t._v(" "),s("h2",{attrs:{id:"函数修饰符：优化函数调用的开销"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数修饰符：优化函数调用的开销"}},[t._v("#")]),t._v(" 函数修饰符：优化函数调用的开销")]),t._v(" "),s("p",[t._v("内联函数：inline")]),t._v(" "),s("p",[t._v("常量表达式函数：constexpr，当参数的值都能在编译阶段确定时，其返回值也会在编译阶段确定。")])])}),[],!1,null,null,null);a.default=e.exports}}]);
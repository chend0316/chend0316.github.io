(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{527:function(a,t,r){"use strict";r.r(t);var s=r(45),v=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"编程语言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编程语言"}},[a._v("#")]),a._v(" 编程语言")]),a._v(" "),r("h2",{attrs:{id:"代码的运行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码的运行"}},[a._v("#")]),a._v(" 代码的运行")]),a._v(" "),r("h3",{attrs:{id:"程序的入口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序的入口"}},[a._v("#")]),a._v(" 程序的入口")]),a._v(" "),r("p",[a._v("C/C++/Java 程序的入口是 "),r("code",[a._v("main")]),a._v(" 函数，函数的入参表示命令行参数，返回值表示程序退出码。")]),a._v(" "),r("p",[a._v("Golang 程序的入口是 "),r("code",[a._v("package main")]),a._v(" 下面的 "),r("code",[a._v("main()")]),a._v(" 函数，"),r("code",[a._v("main()")]),a._v(" 函数没有入参和返回值。通过 "),r("code",[a._v("os.Args")]),a._v(" 获取命令行参数，通过 "),r("code",[a._v("os.Exit()")]),a._v(" 指定程序的返回值。")]),a._v(" "),r("h3",{attrs:{id:"程序的退出"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序的退出"}},[a._v("#")]),a._v(" 程序的退出")]),a._v(" "),r("p",[a._v("程序可以自己主动退出")]),a._v(" "),r("p",[a._v("在多线程环境下")]),a._v(" "),r("ul",[r("li",[a._v("一个线程可以被其它线程要求退出 (interrupt)")]),a._v(" "),r("li",[a._v("一个线程被其它线程强制退出")])]),a._v(" "),r("h2",{attrs:{id:"基本数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[a._v("#")]),a._v(" 基本数据类型")]),a._v(" "),r("h3",{attrs:{id:"基本类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[a._v("#")]),a._v(" 基本类型")]),a._v(" "),r("h3",{attrs:{id:"类型转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[a._v("#")]),a._v(" 类型转换")]),a._v(" "),r("h4",{attrs:{id:"隐式类型转换、显式类型转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换、显式类型转换"}},[a._v("#")]),a._v(" 隐式类型转换、显式类型转换")]),a._v(" "),r("h4",{attrs:{id:"业务类型转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务类型转换"}},[a._v("#")]),a._v(" 业务类型转换")]),a._v(" "),r("ul",[r("li",[a._v("整数和字符串之间，按照不同进制相互转换")])]),a._v(" "),r("h4",{attrs:{id:"装箱、拆箱"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#装箱、拆箱"}},[a._v("#")]),a._v(" 装箱、拆箱")]),a._v(" "),r("h3",{attrs:{id:"数组-array"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组-array"}},[a._v("#")]),a._v(" 数组 (Array)")]),a._v(" "),r("p",[a._v("大多编程语言的数组下标从 0 开始，Matlab、Lua 是从 1 开始的，Python 下标还能为负数。")]),a._v(" "),r("p",[a._v("数组字面量：C、C++ 用 "),r("code",[a._v("{1, 2, 3}")]),a._v(" 表示数组，其它语言基本都用 "),r("code",[a._v("[1, 2, 3]")]),a._v("。")]),a._v(" "),r("p",[a._v("C、C++ 对数组越界不做检查，Java 会做检查。")]),a._v(" "),r("p",[a._v("除了 C 语言，其它语言都有容器类，除了封装数组基本操作以外还实现了动态扩容等策略。")]),a._v(" "),r("h2",{attrs:{id:"复杂数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复杂数据类型"}},[a._v("#")]),a._v(" 复杂数据类型")]),a._v(" "),r("h3",{attrs:{id:"时间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时间"}},[a._v("#")]),a._v(" 时间")]),a._v(" "),r("h2",{attrs:{id:"语言内置数据结构、算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语言内置数据结构、算法"}},[a._v("#")]),a._v(" 语言内置数据结构、算法")]),a._v(" "),r("p",[a._v("哈希表、有序哈希表\n栈、队列、双端队列\n排列组合\n矩阵、矩阵运算")]),a._v(" "),r("h2",{attrs:{id:"函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),r("h2",{attrs:{id:"程序控制流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序控制流"}},[a._v("#")]),a._v(" 程序控制流")]),a._v(" "),r("h3",{attrs:{id:"顺序、分支、循环"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#顺序、分支、循环"}},[a._v("#")]),a._v(" 顺序、分支、循环")]),a._v(" "),r("h3",{attrs:{id:"异常处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[a._v("#")]),a._v(" 异常处理")]),a._v(" "),r("h2",{attrs:{id:"编码规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编码规范"}},[a._v("#")]),a._v(" 编码规范")]),a._v(" "),r("h3",{attrs:{id:"golang"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#golang"}},[a._v("#")]),a._v(" Golang")])])}),[],!1,null,null,null);t.default=v.exports}}]);
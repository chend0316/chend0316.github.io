(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{416:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"csapp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csapp"}},[t._v("#")]),t._v(" CSAPP")]),t._v(" "),a("p",[t._v("本文是我看 CMU-213 做的笔记总结。")]),t._v(" "),a("h2",{attrs:{id:"lecture-02"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lecture-02"}},[t._v("#")]),t._v(" Lecture 02")]),t._v(" "),a("p",[t._v("视频中一共讲了下面这些知识点，比较基础，书上都有。有基础的可以跳着看视频，然后过一遍书。")]),t._v(" "),a("h3",{attrs:{id:"布尔代数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔代数"}},[t._v("#")]),t._v(" 布尔代数")]),t._v(" "),a("p",[t._v("【textbook 2.1.1】因为二进制写起来太长太繁琐，所以我们通常用 16 进制来表示，对照表要背一下。")]),t._v(" "),a("p",[t._v("【textbook 2.1.6】介绍了与、或、非、异或四种布尔代数运算。")]),t._v(" "),a("p",[t._v("【textbook 2.1.7】在 C 语言中分别对应 "),a("code",[t._v("&")]),t._v(" "),a("code",[t._v("|")]),t._v(" "),a("code",[t._v("~")]),t._v(" "),a("code",[t._v("^")]),t._v(" 这四个运算符。")]),t._v(" "),a("p",[t._v("【textbook 2.1.8】C 语言初学者很容易将 "),a("code",[t._v("&&")]),t._v(" 和 "),a("code",[t._v("&")]),t._v(" 搞混。")]),t._v(" "),a("h3",{attrs:{id:"移位操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移位操作"}},[t._v("#")]),t._v(" 移位操作")]),t._v(" "),a("p",[t._v("【textbook 2.1.9】算术右移在左边补符号位、逻辑右移在左边补 0。算术左移、逻辑左移没区别，都是在右边补 0。")]),t._v(" "),a("h3",{attrs:{id:"整数的二进制表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数的二进制表示"}},[t._v("#")]),t._v(" 整数的二进制表示")]),t._v(" "),a("p",[t._v("【textbook 2.2】直接看书吧。")]),t._v(" "),a("h2",{attrs:{id:"lecture-03"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lecture-03"}},[t._v("#")]),t._v(" Lecture 03")]),t._v(" "),a("h3",{attrs:{id:"整数加法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数加法"}},[t._v("#")]),t._v(" 整数加法")]),t._v(" "),a("p",[t._v("【textbook 2.3.1】无符号数相加，两个 w 位的整数相加，结果可能需要 w+1 位来存，如果存不下我们会把高位截断这就叫做 overflow")]),t._v(" "),a("p",[t._v("【textbook 2.3.2】有符号数相加，因为现在普遍用补码表示有符号数，所以我们讨论的就是补码相加。补码相加分为正溢出、负溢出两种情况。我们还要学会如何检测发生了溢出。")]),t._v(" "),a("h3",{attrs:{id:"整数乘法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数乘法"}},[t._v("#")]),t._v(" 整数乘法")]),t._v(" "),a("p",[t._v("【textbook 2.3.4】两个 w 位的整数相乘，结果可能需要 2*w 位来存，也会发生 overflow")]),t._v(" "),a("p",[t._v("【textbook 2.3.5】补码乘法，检查乘法是否溢出会更困难一些。")]),t._v(" "),a("p",[t._v("【textbook 2.3.6】乘以 2、4、8、16 分别相当于左移 1、2、3、4 位，编译器经常这样优化代码，因为乘法指令比移位指令要慢。")]),t._v(" "),a("p",[t._v("【textbook 2.3.7】除以 2 的幂相当于右移。这部分比较复杂，建议好好啃一下课本。")]),t._v(" "),a("p",[t._v("整数除法的情况更加复杂")]),t._v(" "),a("ul",[a("li",[t._v("右移分为算术右移、逻辑右移")]),t._v(" "),a("li",[t._v("对于正数需要向下取整，对于负数需要向上取整，总之就是向 0 的方向取整")])]),t._v(" "),a("p",[t._v("我们在补码上执行除法/右移，会发现它总是向下取整。这样会得到 "),a("code",[t._v("-1 / 2 = -2")]),t._v(" 的错误结果。因此编译器会在移位前做一个 biasing。C 语言中 "),a("code",[t._v("-1 / 2")]),t._v(" 答案是 "),a("code",[t._v("-1")]),t._v("，但是在 Python 中答案是 "),a("code",[t._v("-2")]),t._v("，看起来 Python 没有做 biasing。")]),t._v(" "),a("h3",{attrs:{id:"无符号数经常导致的-bug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无符号数经常导致的-bug"}},[t._v("#")]),t._v(" 无符号数经常导致的 bug")]),t._v(" "),a("p",[t._v("这部分内容书上好像没有。")]),t._v(" "),a("p",[t._v("视频里面是说 unsigned 有个很坑的 overflow: "),a("code",[t._v("0 - 1 = UMAX")]),t._v("，这导致了下面这两个例子中那样难以发现的 bug。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会死循环")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("DELTA")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DELTA 是 unsigned，i 被隐式转换为 unsigned")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CNT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" DELTA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" DELTA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("下面这段代码看起来非常难懂，但确实是没有 bug 的，总之慎用 unsigned。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 i 向下溢出的时候，i = UMAX，于是循环终止")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cnt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);
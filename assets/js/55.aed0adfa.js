(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{419:function(s,a,t){"use strict";t.r(a);var n=t(42),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"编程语言理论知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程语言理论知识"}},[s._v("#")]),s._v(" 编程语言理论知识")]),s._v(" "),t("h2",{attrs:{id:"类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[s._v("#")]),s._v(" 类型")]),s._v(" "),t("h3",{attrs:{id:"强类型和弱类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强类型和弱类型"}},[s._v("#")]),s._v(" 强类型和弱类型")]),s._v(" "),t("p",[s._v("1974年，Liskov和Zilles提出强类型语言的概念")]),s._v(" "),t("blockquote",[t("p",[s._v("在强类型语言中，当一个对象从调用函数传递到被调用函数时，其类型必须与被调用函数中声明的类型兼容")])]),s._v(" "),t("p",[s._v("但是这个解释很泛，也不容易理解，后人给出了更具体的解释：在强类型语言中，变量的类型不能被改变。")]),s._v(" "),t("p",[s._v("例如Java是强类型语言：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" z "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里Java会将'a'的ASCII码传递给x，x的类型仍然是int")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"静态类型和动态类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态类型和动态类型"}},[s._v("#")]),s._v(" 静态类型和动态类型")]),s._v(" "),t("p",[s._v("静态类型语言：在编译阶段确定所有变量的类型")]),s._v(" "),t("p",[s._v("动态类型语言：在运行阶段确定所有变量的类型")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// js在编译的时候并不知道a和b的类型")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("C a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" C b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// c++在编译的时候就知道a和b的类型")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("静态类型语言在编译阶段就能够确定属性的偏移量：")]),s._v(" "),t("ul",[t("li",[s._v("编译阶段就确定了属性的偏移量")]),s._v(" "),t("li",[s._v("运行阶段直接根据偏移量来访问")]),s._v(" "),t("li",[s._v("所有对象共享相同的偏移量")])]),s._v(" "),t("p",[s._v("而动态类型语言编译时无法确定属性偏移量：")]),s._v(" "),t("ul",[t("li",[s._v("在运行时才知道偏移量")]),s._v(" "),t("li",[s._v("需要额外空间维护属性名和偏移量之间的映射")]),s._v(" "),t("li",[s._v("每个对象的偏移量都不相同")])]),s._v(" "),t("h2",{attrs:{id:"堆、栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆、栈"}},[s._v("#")]),s._v(" 堆、栈")]),s._v(" "),t("h3",{attrs:{id:"堆（heap）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆（heap）"}},[s._v("#")]),s._v(" 堆（Heap）")]),s._v(" "),t("p",[s._v("在堆上分配内存也叫做动态内存分配，这比较灵活。分配之后需要手工释放，否则就会造成内存泄漏。")]),s._v(" "),t("p",[s._v("在 C++ 标准中，更准确的叫法是自由存储区（free store），但通常它的底层实现也是堆，所以区分自由存储区和堆的意义不大。")]),s._v(" "),t("p",[s._v("C 语言使用 "),t("code",[s._v("malloc()")]),s._v(" 分配堆空间，使用 "),t("code",[s._v("free()")]),s._v(" 释放堆空间。")]),s._v(" "),t("p",[s._v("有些语言使用 new 这样的关键字分配内存：")]),s._v(" "),t("ul",[t("li",[s._v("C++："),t("code",[s._v("auto list = new std::vector<int>();")])]),s._v(" "),t("li",[s._v("Java："),t("code",[s._v("ArrayList<int> list = new ArrayList<int>();")])])]),s._v(" "),t("p",[s._v("有些语言把 new 关键字省略了：")]),s._v(" "),t("ul",[t("li",[s._v("Python："),t("code",[s._v("lst = list()")])])]),s._v(" "),t("p",[s._v("不管是哪种语言，都可能牵涉到三个操作：")]),s._v(" "),t("ol",[t("li",[s._v("分配一个某大小的内存块")]),s._v(" "),t("li",[s._v("释放一个之前分配的内存块")]),s._v(" "),t("li",[s._v("进行垃圾收集，释放不再使用的内存块")])]),s._v(" "),t("p",[s._v("C++ 通常会做上面的操作 1 和 2。Java 会做上面的操作 1 和 3。而 Python 会做上面的操作 1、2、3。这是语言的特性和实现方式决定的。")]),s._v(" "),t("p",[s._v("上面这三个操作看似简单，实际上水很深。这里简单列举几个堆分配器要解决的问题：")]),s._v(" "),t("ul",[t("li",[s._v("分配内存时需要找到最合适的内存块，避免过多的内存碎片")]),s._v(" "),t("li",[s._v("实际分配的内存通常会比申请的大，而且地址是对齐的")]),s._v(" "),t("li",[s._v("释放内存时要考虑合并连续未使用的内存块")]),s._v(" "),t("li",[s._v("垃圾回收是最复杂的，可单独作为一门研究生课程，这里不展开介绍")])]),s._v(" "),t("p",[s._v("阅读材料：")]),s._v(" "),t("ul",[t("li",[s._v("《CSAPP》9.9节")])]),s._v(" "),t("h3",{attrs:{id:"栈（stack）内存管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈（stack）内存管理"}},[s._v("#")]),s._v(" 栈（Stack）内存管理")]),s._v(" "),t("p",[s._v("局部变量存放在栈上，栈的分配和释放都非常简单，只要移动栈顶指针即可。栈的工作原理决定它天生不存在内存碎片和内存泄漏的情况。")]),s._v(" "),t("p",[s._v("阅读材料：")]),s._v(" "),t("ul",[t("li",[s._v("《CSAPP》3.7节，介绍了函数调用栈")]),s._v(" "),t("li",[s._v("《C专家编程》6.12节，介绍了 CMU 的学生利用栈“作弊”的轶事")])]),s._v(" "),t("h2",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[s._v("#")]),s._v(" 面向对象")]),s._v(" "),t("h3",{attrs:{id:"复合优于继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复合优于继承"}},[s._v("#")]),s._v(" 复合优于继承")]),s._v(" "),t("p",[s._v("使用继承的话，子类会调用父类的方法，就形成了子类对父类的依赖。父类内部的实现变动，可能会影响到子类。")]),s._v(" "),t("p",[s._v("参考《Effective Java》第四章第16条")]),s._v(" "),t("h2",{attrs:{id:"编程范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[s._v("#")]),s._v(" 编程范式")]),s._v(" "),t("h3",{attrs:{id:"函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[s._v("#")]),s._v(" 函数式编程")]),s._v(" "),t("p",[s._v("练习：")]),s._v(" "),t("ul",[t("li",[s._v("实现一个memorize函数，加快汉诺塔算法、斐波那契数列算法")]),s._v(" "),t("li",[s._v("实现函数防抖、函数节流")])]),s._v(" "),t("h2",{attrs:{id:"语言实现细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语言实现细节"}},[s._v("#")]),s._v(" 语言实现细节")]),s._v(" "),t("h3",{attrs:{id:"参数传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数传递"}},[s._v("#")]),s._v(" 参数传递")]),s._v(" "),t("p",[s._v("Python中，函数参数只有引用传递，没有值传递，那么参数传int的时候不怕函数修改实参吗？")]),s._v(" "),t("h3",{attrs:{id:"多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[s._v("#")]),s._v(" 多线程")]),s._v(" "),t("p",[s._v("Python有多种实现，其官方实现的多线程能力很差，因为Python有一个全局解释器锁，导致每一行Python代码都是竞争资源。")])])}),[],!1,null,null,null);a.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{419:function(t,a,s){"use strict";s.r(a);var n=s(45),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),s("h2",{attrs:{id:"线性结构-队列、栈、链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性结构-队列、栈、链表"}},[t._v("#")]),t._v(" 线性结构: 队列、栈、链表")]),t._v(" "),s("ul",[s("li",[t._v("队列 (Queue)")]),t._v(" "),s("li",[t._v("栈 (Stack)")]),t._v(" "),s("li",[t._v("链表 (List)")])]),t._v(" "),s("h3",{attrs:{id:"数组操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组操作"}},[t._v("#")]),t._v(" 数组操作")]),t._v(" "),s("ul",[s("li",[t._v("数组 (Array)")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("lc-27 移除元素: array")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"}},[t._v("练习地址"),s("OutboundLink")],1),t._v("，"),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1Ty4y1L7qP",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线视频"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("数组的题，这题用 C/Java 来刷。需要删除匹配的元素，逆向思维就是要保留不匹配的元素。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numsSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" numsSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("lc-26 删除有序数组中的重复项: array")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("练习地址"),s("OutboundLink")],1),t._v("，"),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1Ty4y1L7qP",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线视频"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("数组的题，这题用 C/Java 来刷。逆向思维就是要保留不重复的元素。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeDuplicates")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numsSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" numsSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("删除无序数组中的重复项: set")]),t._v(" "),s("p",[t._v("请完成下面的函数，实现去重的功能。思路是把 arr 转成 set，然后再转回 arr。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"指针、链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指针、链表"}},[t._v("#")]),t._v(" 指针、链表")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("lc-21 合并两个有序链表")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"}},[t._v("练习地址"),s("OutboundLink")],1)])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("lc-206 反转链表")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("练习地址"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"哈希表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" 哈希表")]),t._v(" "),s("p",[t._v("哈希表 (Hash Table)")]),t._v(" "),s("ul",[s("li",[t._v("英文语境也会叫做: map、dict、kv-pair")]),t._v(" "),s("li",[t._v("中文语境也会叫做: 映射、字典、键值对")])]),t._v(" "),s("p",[t._v("应用场景：")]),t._v(" "),s("ul",[s("li",[t._v("加密")]),t._v(" "),s("li",[t._v("索引")]),t._v(" "),s("li",[t._v("缓存")])]),t._v(" "),s("p",[t._v("解决哈希冲突:")]),t._v(" "),s("ul",[s("li",[t._v("开放寻址法: 线性探测法、二次探测法、再散列法")]),t._v(" "),s("li",[t._v("拉链法")])]),t._v(" "),s("p",[t._v("哈希函数的实现:")]),t._v(" "),s("ul",[s("li",[t._v("工业界著名的: MD5、SHA、CRC")]),t._v(" "),s("li",[t._v("直接定址法")]),t._v(" "),s("li",[t._v("除留余数法，要选一个较大的素数作为除数")]),t._v(" "),s("li",[t._v("一致性哈希，可以避免扩容时产生大量数据搬移")]),t._v(" "),s("li",[t._v("如果自己设计哈希算法，原则就是要尽可能随机且均匀")])]),t._v(" "),s("p",[t._v("当需要删除元素的时候，开放寻址法不能直接删除元素，而是要做特殊处理 (标记为已删除，而不是真正删除元素)。")]),t._v(" "),s("h3",{attrs:{id:"扩容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[t._v("#")]),t._v(" 扩容")]),t._v(" "),s("p",[t._v("当装载因子接近 1 的时候，开放寻址法速度降低。当装载因子远大于 1 时，拉链法会退化成为链表。扩容可以降低装载因子，但扩容后大量数据需要移动，这会导致分布式缓存场景下大量节点出现缓存击穿，"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Consistent_hashing",target:"_blank",rel:"noopener noreferrer"}},[t._v("一致性哈希"),s("OutboundLink")],1),t._v("算法可以缓解这个问题。")]),t._v(" "),s("h3",{attrs:{id:"编程语言内置的哈希表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程语言内置的哈希表"}},[t._v("#")]),t._v(" 编程语言内置的哈希表")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("java.util.Map"),s("OutboundLink")],1),t._v(" 是 Java 内置的一个接口，最常见的实现是："),s("code",[t._v("HashMap")]),t._v("、"),s("code",[t._v("TreeMap")]),t._v("。在 Java 中，每个对象都有 hashCode() 方法。")]),t._v(" "),s("p",[t._v("JavaScript 的对象本身就可以当做哈希表使用："),s("code",[t._v("var hash = {};")]),t._v("，ES6 新增了一个专门做哈希表的类："),s("code",[t._v("var hash = new Map();")])]),t._v(" "),s("p",[t._v("Python 的 "),s("code",[t._v("dict")]),t._v(" 就是哈希表。")]),t._v(" "),s("ul",[s("li",[t._v("初始化: "),s("code",[t._v("hash = dict()")])]),t._v(" "),s("li",[t._v("使用字面量初始化: "),s("code",[t._v("hash = {}")])]),t._v(" "),s("li",[t._v("添加元素: "),s("code",[t._v("hash['a'] = 123")])]),t._v(" "),s("li",[t._v("删除元素: "),s("code",[t._v("del hash['a']")])]),t._v(" "),s("li",[t._v("判断 key 是否存在: "),s("code",[t._v("'a' in hash")])]),t._v(" "),s("li",[t._v("获取哈希表的大小: "),s("code",[t._v("len(hash)")])])]),t._v(" "),s("h2",{attrs:{id:"半线性结构-二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#半线性结构-二叉树"}},[t._v("#")]),t._v(" 半线性结构: 二叉树")]),t._v(" "),s("p",[t._v("二叉树一般用链式存储法来存储，每个节点有 left、right 两个指针。完全二叉树可以用顺序存储法来存储，常用于二叉堆的场景。")]),t._v(" "),s("h3",{attrs:{id:"二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),s("p",[t._v("在讨论二叉搜索树时，通常是指没有重复节点的情况。删除节点操作中，如果待删节点有两个子节点就会比较复杂。还有一种取巧的删除方法，就是将节点标记为已删除，而不是真正去删除这个节点。")]),t._v(" "),s("p",[t._v("如果要支持重复数据的二叉搜索树。一种偷懒的方法是将每个节点换成链表。另一种更正经的方法不好描述，我这边先不写了。")]),t._v(" "),s("h3",{attrs:{id:"平衡二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉搜索树"}},[t._v("#")]),t._v(" 平衡二叉搜索树")]),t._v(" "),s("h2",{attrs:{id:"非线性结构-图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非线性结构-图"}},[t._v("#")]),t._v(" 非线性结构: 图")])])}),[],!1,null,null,null);a.default=r.exports}}]);
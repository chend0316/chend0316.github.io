(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{362:function(t,a,s){t.exports=s.p+"assets/img/store.4301e5cb.png"},363:function(t,a,s){t.exports=s.p+"assets/img/flux-mvc-does-not-scale.d4fb9434.png"},364:function(t,a,s){t.exports=s.p+"assets/img/flux.ef494b39.png"},365:function(t,a,s){t.exports=s.p+"assets/img/redux-arch.5fec45bd.png"},405:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"状态管理框架"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态管理框架"}},[t._v("#")]),t._v(" 状态管理框架")]),t._v(" "),n("p",[n("img",{attrs:{src:s(362),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"前端开发所面临的挑战"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端开发所面临的挑战"}},[t._v("#")]),t._v(" 前端开发所面临的挑战")]),t._v(" "),n("p",[t._v("随着 JavaScript 单页应用开发日趋复杂，组件的状态变得越来越复杂。")]),t._v(" "),n("p",[t._v("Flux, CQRS, Event Sourcing, Redux, Vuex 这些状态管理框架做的事情就是让状态改变（state mutations）变得"),n("strong",[t._v("可预测")]),t._v("。")]),t._v(" "),n("p",[t._v("同时这些框架对 state 的操作做了限制，有些限制很严格而且反常识，但遵循这些限制会带来如下开发体验的改进：")]),t._v(" "),n("ul",[n("li",[t._v("时间旅行（time travel）：可以回到过去的某个状态进行调试")]),t._v(" "),n("li",[t._v("状态快照导入导出")]),t._v(" "),n("li",[t._v("状态回放")]),t._v(" "),n("li",[t._v("等等")])]),t._v(" "),n("h2",{attrs:{id:"flux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flux"}},[t._v("#")]),t._v(" Flux")]),t._v(" "),n("p",[t._v("Flux 不是一个具体的框架，而是一种架构思想。有许多框架都按照 Flux 的思想设计，其中最著名的无疑是 Redux。")]),t._v(" "),n("p",[t._v("Facebook 在 F8 大会上提出了"),n("a",{attrs:{href:"https://www.youtube.com/watch?v=nYkdrAPrdcw",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hacker Way: Rethinking Web App Development at Facebook"),n("OutboundLink")],1),t._v("，介绍了 Flux 架构。")]),t._v(" "),n("p",[t._v("首先提出了现有 MVC 不能满足大型系统的需求，如下图。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(363),alt:""}})]),t._v(" "),n("p",[t._v("然后提出了 Flux 架构，如下图。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(364),alt:""}})]),t._v(" "),n("p",[t._v("第一张图有"),n("a",{attrs:{href:"https://www.infoq.com/news/2014/05/facebook-mvc-flux/",target:"_blank",rel:"noopener noreferrer"}},[t._v("争议"),n("OutboundLink")],1),t._v("，最大的争议在于这张图根本不是 MVC。"),n("a",{attrs:{href:"https://www.reddit.com/r/programming/comments/25nrb5/facebook_mvc_does_not_scale_use_flux_instead/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在Reddit 上大家也有非常激烈的讨论"),n("OutboundLink")],1),t._v("，稍微总结一下就是：")]),t._v(" "),n("ul",[n("li",[t._v("MVC 本就没有一个明确的规定，不同人有不同的理解")]),t._v(" "),n("li",[t._v("大家先别纠结那张图是不是 MVC，那张图的重点在于双向数据流会导致一系列连锁反应")]),t._v(" "),n("li",[t._v("Flux 的贡献在于严格规定了「单向数据流 (unidirectional data flow)」，而传统 MVC 没有严格规定")]),t._v(" "),n("li",[t._v("Flux 也可以看做是一种 MVC 变体")])]),t._v(" "),n("h3",{attrs:{id:"flux-提出的几个概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flux-提出的几个概念"}},[t._v("#")]),t._v(" Flux 提出的几个概念")]),t._v(" "),n("p",[t._v("【可预测性 (Predictability) 】预测指的是通过阅读代码库来判断程序的运行结果。")]),t._v(" "),n("p",[t._v("Flux 出现以前，Facebook 的代码库是不可预测的。这是因为模块之间相互依赖，需要仔细推敲其它相关模块的逻辑后，才能预测出当前的代码改动会导致什么结果。")]),t._v(" "),n("p",[t._v("【单向数据流】这是提高可预测性的一种约束，也是 Flux 最核心的约束。")]),t._v(" "),n("h2",{attrs:{id:"redux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),n("p",[n("img",{attrs:{src:s(365),alt:""}})]),t._v(" "),n("p",[t._v("Redux 遵循了 Flux 的思想，2015年由 "),n("a",{attrs:{href:"https://github.com/gaearon",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dan Abramov"),n("OutboundLink")],1),t._v(" 提出。二者很像，但在具体细节上有很大区别。后来 Dan 加入了 Facebook，Redux 也就成了 Facebook 官方提供的状态管理框架。")]),t._v(" "),n("p",[t._v("Redux 的三大原则：")]),t._v(" "),n("ul",[n("li",[t._v("单一数据源（Single source of truth），所有状态都要集中放在 State 对象里面")]),t._v(" "),n("li",[t._v("State 是只读的（State is read-only），组件不能直接修改 State，而是通过 dispatch action 的方式表明自己想修改 State 的意图，由 Reducer 处理这些修改意图")]),t._v(" "),n("li",[t._v("Reducer 必须是纯函数（Changes are made with pure functions），dispatch 发送出去的 action 会被送给 Reducer 处理，Reducer 是唯一能“修改” State 的地方，而 Reducer 必须为纯函数")])]),t._v(" "),n("p",[t._v("备注：")]),t._v(" "),n("ul",[n("li",[t._v("纯函数就是其返回值只依赖入参，不依赖全局变量/资源的函数")]),t._v(" "),n("li",[t._v("连 Reducer 都不能直接修改 State，而是返回一份新的 State，实现上需要深拷贝一份然后进行修改")]),t._v(" "),n("li",[t._v("纯函数可以大大提高可预测性、可测试性")])]),t._v(" "),n("h3",{attrs:{id:"action"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" Action")]),t._v(" "),n("p",[t._v("Action 是个普通的对象，如下 "),n("code",[t._v("dispatch")]),t._v(" 中的参数就是 Action：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("store"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'COMPLETE_TODO'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  index"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nstore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SET_VISIBILITY_FILTER'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  filter"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SHOW_COMPLETED'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"reducer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),n("p",[t._v("Reducer 是纯函数，入参是 state 和 action，它需要返回一个新的 state。注意它不能直接修改 state 本身，哪怕只修改一个小字段也要构造并返回一个新的 state。一个简单的例子如下：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("todos")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD_TODO'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意不能就地修改state")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不能通过 state.push({ text: action.text, completed: false }) 来实现")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须拷贝一份新的")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          text"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          completed"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'COMPLETE_TODO'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("todo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" todo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            completed"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" todo\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"处理异步状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理异步状态"}},[t._v("#")]),t._v(" 处理异步状态")]),t._v(" "),n("h2",{attrs:{id:"其它深入思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它深入思考"}},[t._v("#")]),t._v(" 其它深入思考")]),t._v(" "),n("p",[t._v("Redux 规定 Reducer 不能就地修改 state，这有点反人类，会加重垃圾回收器的负担。针对这点 "),n("a",{attrs:{href:"https://github.com/reduxjs/redux/issues/328",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dan 在 issue 上做出了回应"),n("OutboundLink")],1),t._v("，他认为不会影响性能。")]),t._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("p",[t._v("Redux:")]),t._v(" "),n("ul",[n("li",[t._v("https://redux.js.org/introduction/motivation")]),t._v(" "),n("li",[t._v("https://redux.js.org/introduction/three-principles")])])])}),[],!1,null,null,null);a.default=e.exports}}]);
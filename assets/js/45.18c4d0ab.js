(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{412:function(t,e,a){"use strict";a.r(e);var r=a(42),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http-协议实验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-协议实验"}},[t._v("#")]),t._v(" HTTP 协议实验")]),t._v(" "),a("h2",{attrs:{id:"实验：使用tcp客户端实现http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验：使用tcp客户端实现http"}},[t._v("#")]),t._v(" 实验：使用TCP客户端实现HTTP")]),t._v(" "),a("p",[t._v("我们的实验需要使用telnet客户端，这是一个纯粹的TCP连接工具。")]),t._v(" "),a("p",[t._v("首先我们运行telnet，连接到极客时间主机，在命令行里输入以下内容：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("telnet time.geekbang.org 80\n")])])]),a("p",[t._v("这个时候，TCP连接已经建立，我们输入以下字符作为请求：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GET / HTTP/1.1\nHost: time.geekbang.org\n")])])]),a("p",[t._v("按下两次回车，我们收到了服务端的回复：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('HTTP/1.1 301 Moved Permanently\nDate: Fri, 25 Jan 2019 13:28:12 GMT\nContent-Type: text/html\nContent-Length: 182\nConnection: keep-alive\nLocation: https://time.geekbang.org/\nStrict-Transport-Security: max-age=15768000\n\n<html>\n<head><title>301 Moved Permanently</title></head>\n<body bgcolor="white">\n<center><h1>301 Moved Permanently</h1></center>\n<hr><center>openresty</center>\n</body>\n</html>\n')])])]),a("p",[t._v("这就是一次完整的HTTP请求的过程了，我们可以看到，在TCP通道中传输的，完全是文本。")]),t._v(" "),a("p",[t._v("在请求部分，第一行是 request line，第二行是 request header。")]),t._v(" "),a("p",[t._v("在响应部分，第一行被称作 response line，第二行开始是 response header，从空行开始是 response body。")]),t._v(" "),a("h2",{attrs:{id:"http-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-method"}},[t._v("#")]),t._v(" HTTP Method")]),t._v(" "),a("p",[t._v("浏览器通过地址栏访问页面都是GET方法。表单提交用POST方法。")]),t._v(" "),a("p",[t._v("HEAD则是跟GET类似，只返回请求头，多数由JavaScript发起。")]),t._v(" "),a("p",[t._v("PUT和DELETE分别表示添加资源和删除资源，但是实际上这只是语义上的一种约定，并没有强约束。")]),t._v(" "),a("p",[t._v("CONNECT现在多用于HTTPS和WebSocket。")]),t._v(" "),a("p",[t._v("OPTIONS和TRACE一般用于调试，多数线上服务都不支持。")]),t._v(" "),a("h2",{attrs:{id:"http-status-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-status-code"}},[t._v("#")]),t._v(" HTTP Status code")]),t._v(" "),a("p",[t._v("HTTP 状态码网上一搜就有，这里讲几个前端开发常见的。")]),t._v(" "),a("p",[t._v("403表示无权限，404表示表示请求的页面不存在。")]),t._v(" "),a("p",[t._v("304表示客户端本地已经有缓存的版本，并且在Request中告诉了服务端，当服务端通过时间或者tag，发现没有更新的时候，就会返回一个不含body的304状态。")]),t._v(" "),a("h2",{attrs:{id:"http-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-header"}},[t._v("#")]),t._v(" HTTP Header")]),t._v(" "),a("p",[t._v("HTTP头可以看作一个键值对，我们可以自由定义HTTP Header。不过在HTTP规范中，规定了一些特殊的HTTP Header，这里我们挑几个重点的说一下：")]),t._v(" "),a("p",[t._v("我们先来看看Request Header。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static001.geekbang.org/resource/image/2b/a2/2be3e2457f08bdf624837dfaee01e4a2.png",alt:"img"}})]),t._v(" "),a("p",[t._v("接下来看一下Response Header。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static001.geekbang.org/resource/image/ef/c9/efdeadf27313e08bf0789a3b5480f7c9.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"http-request-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-request-body"}},[t._v("#")]),t._v(" HTTP Request Body")]),t._v(" "),a("p",[t._v("HTTP请求的body主要用于提交表单场景。实际上，http请求的body是比较自由的，只要浏览器端发送的body服务端认可就可以了。一些常见的body格式是：")]),t._v(" "),a("ul",[a("li",[t._v("application/json")]),t._v(" "),a("li",[t._v("application/x-www-form-urlencoded")]),t._v(" "),a("li",[t._v("multipart/form-data")]),t._v(" "),a("li",[t._v("text/xml")])]),t._v(" "),a("p",[t._v("我们使用html的form标签提交产生的html请求，默认会产生 application/x-www-form-urlencoded 的数据格式，当有文件上传时，则会使用multipart/form-data。")])])}),[],!1,null,null,null);e.default=s.exports}}]);
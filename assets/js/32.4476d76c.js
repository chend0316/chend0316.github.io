(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{396:function(t,e,r){"use strict";r.r(e);var a=r(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"virtualdom"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#virtualdom"}},[t._v("#")]),t._v(" VirtualDOM")]),t._v(" "),r("p",[t._v("VirtualDOM 是由 React 发扬光大的，后来 Vue 2.x 也引入了并获得非常大的性能提升。")]),t._v(" "),r("h2",{attrs:{id:"vdom-diff-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vdom-diff-算法"}},[t._v("#")]),t._v(" VDOM Diff 算法")]),t._v(" "),r("p",[t._v("因为 DOM 操作是比较耗时的，所以VDOM 发生变化后，需要根据两棵 VDOM 树之间的差异来计算：如何用"),r("strong",[t._v("最少的步骤")]),t._v("更新 DOM 节点。")]),t._v(" "),r("p",[t._v("React 将这个算法叫做 Diffing，Vue 将这个算法叫做 path。但这两个算法其实是一样的。")]),t._v(" "),r("h2",{attrs:{id:"react：o-n-3-到o-n-的优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react：o-n-3-到o-n-的优化"}},[t._v("#")]),t._v(" React：O(N^3)到O(N)的优化")]),t._v(" "),r("p",[t._v("树的最小编辑距离（Tree Edit Distance）算法需要 O(N^3) 的时间复杂度，而"),r("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/reconciliation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("React官方文档"),r("OutboundLink")],1),t._v("介绍了 React 如何根据 DOM 场景特点将该算法优化成 O(N) 的复杂度。具体来说 React 对DOM场景做了两个假设：")]),t._v(" "),r("ul",[r("li",[t._v("React 希望类型相同的兄弟节点拥有 key 信息，这就要求业务配合传入 key。这样 Diffing 算法只需根据节点的 key 信息判断是否是同一个节点，不需要遍历子孙节点")]),t._v(" "),r("li",[t._v("React 假设 DOM 节点更多的是同节点下移动，很少发生跨节点移动。有了这个假设，原本树的编辑距离问题就变成了数组的编辑距离问题")])]),t._v(" "),r("p",[t._v("这两个假设，意味着 React 求的是该问题的次优解而不是最优解，这是一种权衡。")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/supnate",target:"_blank",rel:"noopener noreferrer"}},[t._v("王沛"),r("OutboundLink")],1),t._v("做了一个"),r("a",{attrs:{href:"https://supnate.github.io/react-dom-diff/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线Demo"),r("OutboundLink")],1),t._v("，可以在 console log 直观看到 React 在不同情况下节点创建（created）、销毁（unmount）的情况。")]),t._v(" "),r("h2",{attrs:{id:"vue：数组的编辑距离问题求解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue：数组的编辑距离问题求解"}},[t._v("#")]),t._v(" Vue：数组的编辑距离问题求解")]),t._v(" "),r("p",[t._v("这个问题要求使用最少操作将旧数组变为新数组，可以进行的操作有：")]),t._v(" "),r("ul",[r("li",[t._v("创建节点")]),t._v(" "),r("li",[t._v("删除节点")]),t._v(" "),r("li",[t._v("移动节点")])]),t._v(" "),r("p",[t._v("一般人可能就会遍历一遍旧节点用哈希表存起来，再遍历一遍新节点判断是否已经存在哈希表中。这样做的时间复杂度是没问题的，但是空间复杂度达到了 O(N)。")]),t._v(" "),r("p",[t._v("Vue 中实现的算法虽然最坏情况下也达到了 O(N) 的空间复杂度，但 Vue 针对 DOM 场景做了一些优化，让算法在大多情况下都能达到 O(1) 的空间复杂度。如果感兴趣可以阅读以下材料：")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/book/5a36661851882538e2259c0f",target:"_blank",rel:"noopener noreferrer"}},[t._v("剖析 Vue.js 内部运行机制"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("Vue 源码中 "),r("code",[t._v("patch.js")]),t._v(" 文件的 "),r("code",[t._v("updateChildren()")]),t._v(" 函数")])])])}),[],!1,null,null,null);e.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{407:function(e,r,t){"use strict";t.r(r);var n=t(42),a=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"习题册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#习题册"}},[e._v("#")]),e._v(" 习题册")]),e._v(" "),t("p",[e._v("如果只是想刷题，可以看这个习题册，有如下特点：")]),e._v(" "),t("ul",[t("li",[e._v("把每一题各种解法都列出来了")]),e._v(" "),t("li",[e._v("没有给答案")]),e._v(" "),t("li",[e._v("每一题都有超链接，可以直接点过去做题")])]),e._v(" "),t("h2",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[e._v("#")]),e._v(" 数据结构")]),e._v(" "),t("h3",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[e._v("#")]),e._v(" 链表")]),e._v(" "),t("p",[e._v("链表的题算法思路都比较简单，但代码实现上细节很容易出错，对代码功力的要求比较高。如果不能顺利写出来，一定要刻意练习，直到自己能在白板上手写。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("206. 反转链表"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("24. 两两交换链表中的节点"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"}},[e._v("141. 环形链表"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("142. 环形链表 II"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/",target:"_blank",rel:"noopener noreferrer"}},[e._v("25. K 个一组翻转链表"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"堆（优先级队列）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆（优先级队列）"}},[e._v("#")]),e._v(" 堆（优先级队列）")]),e._v(" "),t("p",[e._v("堆分为大顶堆、小顶堆，需要掌握各编程语言内置的堆。此外要小心Python只支持小顶堆不支持大顶堆。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/",target:"_blank",rel:"noopener noreferrer"}},[e._v("703. 数据流中的第K大元素"),t("OutboundLink")],1),e._v("，")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("239. 滑动窗口最大值"),t("OutboundLink")],1),e._v("，这题除了用大顶堆，还有一个线性时间的算法；")])]),e._v(" "),t("h3",{attrs:{id:"栈、队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈、队列"}},[e._v("#")]),e._v(" 栈、队列")]),e._v(" "),t("p",[e._v("栈和队列的题都很简单，只要掌握各个语言内置的栈、队列即可。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/backspace-string-compare/",target:"_blank",rel:"noopener noreferrer"}},[e._v("844. 比较含退格的字符串"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-stack-using-queues/",target:"_blank",rel:"noopener noreferrer"}},[e._v("225. 用队列实现栈"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-queue-using-stacks/",target:"_blank",rel:"noopener noreferrer"}},[e._v("232. 用栈实现队列"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("20. 有效的括号"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[e._v("#")]),e._v(" 树")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("98. 验证二叉搜索树"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("235. 二叉搜索树的最近公共祖先"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("236. 二叉树的最近公共祖先"),t("OutboundLink")],1)])]),e._v(" "),t("h4",{attrs:{id:"二叉树遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉树遍历"}},[e._v("#")]),e._v(" 二叉树遍历")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("先序遍历"),t("OutboundLink")],1),e._v("由于是尾递归，所以很容易改成迭代。\n"),t("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("中序遍历"),t("OutboundLink")],1),e._v("改迭代比较难，主要方法有颜色标记法、左臂下探法。\n"),t("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("后序遍历"),t("OutboundLink")],1),e._v("改迭代更难，我没研究。")]),e._v(" "),t("p",[e._v("二叉树遍历改迭代感觉没啥意义，有精力还不如先练其它题目。")]),e._v(" "),t("h3",{attrs:{id:"trie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trie"}},[e._v("#")]),e._v(" Trie")]),e._v(" "),t("p",[e._v("Trie是一种新型数据结构：")]),e._v(" "),t("ul",[t("li",[e._v("多数教材中都没有提到")]),e._v(" "),t("li",[e._v("各个编程语言中也没有内置Trie")])]),e._v(" "),t("p",[e._v("由于Trie非常实用而且实现并不难，所以必须熟练到能在白板上手写这个数据结构。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/word-search/",target:"_blank",rel:"noopener noreferrer"}},[e._v("79. 单词搜索"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/word-search-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("212. 单词搜索 II"),t("OutboundLink")],1),e._v("，官方题解中有基于Python字典迭代构造Trie的算法，然后用"),t("code",[e._v("$")]),e._v("字符表示单词末尾")])]),e._v(" "),t("h3",{attrs:{id:"并查集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并查集"}},[e._v("#")]),e._v(" 并查集")]),e._v(" "),t("p",[e._v("并查集也是一种新型数据结构，教材中很少提，各语言也没有内置。")]),e._v(" "),t("p",[e._v("经典并查集的实现不难，需要熟练到能在白板上手写。并查集的深度决定其优劣，所以并查集有2种优化办法：rank优化、路径压缩。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/number-of-islands/",target:"_blank",rel:"noopener noreferrer"}},[e._v("200. 岛屿数量"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/friend-circles/",target:"_blank",rel:"noopener noreferrer"}},[e._v("547. 朋友圈"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"有序哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有序哈希表"}},[e._v("#")]),e._v(" 有序哈希表")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/",target:"_blank",rel:"noopener noreferrer"}},[e._v("剑指 Offer 50. 第一个只出现一次的字符"),t("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=a.exports}}]);